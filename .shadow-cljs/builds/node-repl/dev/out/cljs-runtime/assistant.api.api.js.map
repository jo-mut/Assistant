{"version":3,"sources":["assistant/api/api.cljs"],"mappings":";AAGA,6BAAA,7BAAKA;AACL,+BAAA,/BAAKC;AACL,4BAAA,5BAAKC;AAEL,4BAAA,5BAAMC,gEAASC;AAAf,AAAA,mBAAA,mBAAA,2CAAA,qEAAA,oCAGc,AAACC,eAAkB,AAACC,qBAASF;;AAE3C,0BAAA,1BAAMG,4DAAOC,OAAOC;AAApB,AACE,aAAA,2CAAA,0DAAA,gBAAA,4DAAA,mFAAA,2CAAA,qDAAA,OAAA,pXAAMC,6aAE6BD;AAFnC,OAGM,AAACE,MAASX,2BAAU,AAACG,0BAAQO,3DAC7B,yEAAO,WAAKE,pFAIZ,PAEA;AANO,AACE,oBAAI,AAAMA;AACR,OAAOA;;AACP,MAAO,MAAA,NAACC;;SACZ,WAAKT;AAAL,AACE,OAACU,YAAeV;UACjB,WAAKW;AAAL,AACE,mBAAA,ZAACD,sCAAyCC","names":["assistant.api.api/base-url","assistant.api.api/ollama-url","assistant.api.api/api-key","assistant.api.api/options","data","js/JSON.stringify","cljs.core/clj->js","assistant.api.api/fetch","prompt","input-message","object","js/fetch","response","js/Error","js/console.log","error"],"sourcesContent":["(ns assistant.api.api)\n\n\n(def base-url \"https://api.openai.com/v1/chat/completions\")\n(def ollama-url \"http://127.0.0.1:11434/\")\n(def api-key \"\")\n\n(defn options [data]\n  #js {:method \"POST\"\n       :headers {:Content-Type \"application/json\"}\n       :body  (js/JSON.stringify (clj->js  data))})\n\n(defn fetch [prompt input-message]\n  (let [object {:models \"gpt-3.5-turbo\"\n                :messages [{:role \"user\"\n                            :content input-message}]}]\n    (-> (js/fetch base-url  (options object))\n        (.then (fn [response]\n                 (if (.-ok response)\n                   (.json response)\n                   (throw (js/Error \"Failed to fetch data\")))))\n        (.then (fn [data]\n                 (js/console.log data)))\n        (.catch (fn [error]\n                  (js/console.log \"Error fetching api data\" error))))))"]}