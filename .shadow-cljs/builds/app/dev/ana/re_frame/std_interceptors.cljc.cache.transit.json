["^ ","~:output",["^ ","~:js","goog.provide('re_frame.std_interceptors');\nre_frame.std_interceptors.debug = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$debug_before(context){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Handling re-frame event:\",re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], 0));\n\nreturn context;\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$debug_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar orig_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new_db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes in:\",event], 0));\n} else {\nvar vec__14044_14106 = clojure.data.diff(orig_db,new_db);\nvar only_before_14107 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14044_14106,(0),null);\nvar only_after_14108 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14044_14106,(1),null);\nvar db_changed_QMARK__14109 = (((!((only_before_14107 == null)))) || ((!((only_after_14108 == null)))));\nif(db_changed_QMARK__14109){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"group\",\"group\",582596132),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"db clojure.data/diff for:\",event], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only before:\",only_before_14107], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only after :\",only_after_14108], 0));\n\nre_frame.loggers.console(new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes resulted from:\",event], 0));\n}\n}\n\nreturn context;\n})], 0));\nre_frame.std_interceptors.unwrap = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"unwrap\",\"unwrap\",-1399175462),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$unwrap_before(context){\nvar vec__14051 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14051,(0),null);\nvar payload = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14051,(1),null);\nvar event = vec__14051;\nif((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(event))) && (cljs.core.map_QMARK_(payload)))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"unwrap\\\" interceptor requires event to be a 2-vector of [event-id payload-map]. Got \",event], 0));\n\nreturn context;\n} else {\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),payload);\n}\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$unwrap_after(context){\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\n})], 0));\nre_frame.std_interceptors.trim_v = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"trim-v\",\"trim-v\",-1274938640),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$trim_v_before(context){\nif((!(cljs.core.vector_QMARK_(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \",cljs.core.type(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))], 0));\n\nreturn context;\n} else {\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),cljs.core.subvec,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(1)], 0));\n}\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$trim_v_after(context){\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\n})], 0));\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n * \n *   These handlers take two arguments;  `db` and `event`, and they return `db`.\n * \n *    (fn [db event]\n *       ....)\n * \n *   So, the interceptor wraps the given handler:\n *   1. extracts two `:coeffects` keys: db and event\n *   2. calls handler-fn\n *   3. stores the db result back into context's `:effects`\n */\nre_frame.std_interceptors.db_handler__GT_interceptor = (function re_frame$std_interceptors$db_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$db_handler__GT_interceptor_$_db_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__14058 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__14059 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__14059);\n\ntry{try{var map__14061 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__14061__$1 = cljs.core.__destructure_map(map__14061);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14061__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14061__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null, db,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__13674__auto___14134 = re_frame.interop.now();\nvar duration__13675__auto___14135 = (end__13674__auto___14134 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__13675__auto___14135,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__13674__auto___14134);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__14058);\n}})():(function (){var map__14064 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__14064__$1 = cljs.core.__destructure_map(map__14064);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14064__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14064__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null, db,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__13676__auto___14137 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__13676__auto___14137);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n * \n *   These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n * \n *    (fn [coeffects event]\n *       {:db ...\n *        :dispatch ...})\n * \n * Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n *   1. extracts `:coeffects`\n *   2. call handler-fn giving coeffects\n *   3. stores the result back into the `:effects`\n */\nre_frame.std_interceptors.fx_handler__GT_interceptor = (function re_frame$std_interceptors$fx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$fx_handler__GT_interceptor_$_fx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__14073 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__14074 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__14074);\n\ntry{try{var map__14076 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__14076__$1 = cljs.core.__destructure_map(map__14076);\nvar coeffects = map__14076__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14076__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null, coeffects,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__13674__auto___14156 = re_frame.interop.now();\nvar duration__13675__auto___14157 = (end__13674__auto___14156 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__13675__auto___14157,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__13674__auto___14156);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__14073);\n}})():(function (){var map__14077 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__14077__$1 = cljs.core.__destructure_map(map__14077);\nvar coeffects = map__14077__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14077__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null, coeffects,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__13676__auto___14159 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__13676__auto___14159);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n *   These advanced handlers take one argument: `context` and they return a modified `context`.\n *   Example:\n * \n *    (fn [context]\n *       (enqueue context [more interceptors]))\n */\nre_frame.std_interceptors.ctx_handler__GT_interceptor = (function re_frame$std_interceptors$ctx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$ctx_handler__GT_interceptor_$_ctx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__14078 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__14079 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__14079);\n\ntry{try{return (handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null, context));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__13674__auto___14163 = re_frame.interop.now();\nvar duration__13675__auto___14164 = (end__13674__auto___14163 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__13675__auto___14164,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__13674__auto___14163);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__14078);\n}})():(handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null, context)));\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__13676__auto___14169 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__13676__auto___14169);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\nre_frame.std_interceptors.path = (function re_frame$std_interceptors$path(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___14175 = arguments.length;\nvar i__5727__auto___14176 = (0);\nwhile(true){\nif((i__5727__auto___14176 < len__5726__auto___14175)){\nargs__5732__auto__.push((arguments[i__5727__auto___14176]));\n\nvar G__14179 = (i__5727__auto___14176 + (1));\ni__5727__auto___14176 = G__14179;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((0) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((0)),(0),null)):null);\nreturn re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic(argseq__5733__auto__);\n});\n\n(re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar path = cljs.core.flatten(args);\nvar db_store_key = new cljs.core.Keyword(\"re-frame-path\",\"db-store\",\"re-frame-path/db-store\",655758490);\nif(cljs.core.empty_QMARK_(path)){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"path\\\" interceptor given no params\"], 0));\n} else {\n}\n\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"path\",\"path\",-188191168),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function (context){\nvar original_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nreturn re_frame.interceptor.assoc_coeffect(cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,db_store_key,cljs.core.conj,original_db),new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(original_db,path));\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function (context){\nvar db_store = db_store_key.cljs$core$IFn$_invoke$arity$1(context);\nvar original_db = cljs.core.peek(db_store);\nvar new_db_store = cljs.core.pop(db_store);\nvar context_SINGLEQUOTE_ = re_frame.interceptor.assoc_coeffect(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,db_store_key,new_db_store),new cljs.core.Keyword(null,\"db\",\"db\",993250759),original_db);\nvar db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nreturn context_SINGLEQUOTE_;\n} else {\nreturn re_frame.interceptor.assoc_effect(context_SINGLEQUOTE_,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(original_db,path,db));\n}\n})], 0));\n}));\n\n(re_frame.std_interceptors.path.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.std_interceptors.path.cljs$lang$applyTo = (function (seq14080){\nvar self__5712__auto__ = this;\nreturn self__5712__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq14080));\n}));\n\nre_frame.std_interceptors.enrich = (function re_frame$std_interceptors$enrich(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"enrich\",\"enrich\",-2108921925),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$enrich_$_enrich_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null, db,event)));\n})], 0));\n});\nre_frame.std_interceptors.after = (function re_frame$std_interceptors$after(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"after\",\"after\",594996914),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$after_$_after_after(context){\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\n(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null, db,event));\n\nreturn context;\n})], 0));\n});\nre_frame.std_interceptors.on_changes = (function re_frame$std_interceptors$on_changes(var_args){\nvar args__5732__auto__ = [];\nvar len__5726__auto___14180 = arguments.length;\nvar i__5727__auto___14181 = (0);\nwhile(true){\nif((i__5727__auto___14181 < len__5726__auto___14180)){\nargs__5732__auto__.push((arguments[i__5727__auto___14181]));\n\nvar G__14182 = (i__5727__auto___14181 + (1));\ni__5727__auto___14181 = G__14182;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5733__auto__ = ((((2) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((2)),(0),null)):null);\nreturn re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5733__auto__);\n});\n\n(re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic = (function (f,out_path,in_paths){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"on-changes\",\"on-changes\",1345912602),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$on_change_after(context){\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar old_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__14084_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_db,p1__14084_SHARP_);\n}),in_paths);\nvar old_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__14085_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_db,p1__14085_SHARP_);\n}),in_paths);\nvar changed_ins_QMARK_ = (function (){var and__5000__auto__ = cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nif(and__5000__auto__){\nreturn cljs.core.some(cljs.core.false_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.identical_QMARK_,new_ins,old_ins));\n} else {\nreturn and__5000__auto__;\n}\n})();\nif(cljs.core.truth_(changed_ins_QMARK_)){\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(new_db,out_path,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,new_ins)));\n} else {\nreturn context;\n}\n})], 0));\n}));\n\n(re_frame.std_interceptors.on_changes.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(re_frame.std_interceptors.on_changes.cljs$lang$applyTo = (function (seq14092){\nvar G__14093 = cljs.core.first(seq14092);\nvar seq14092__$1 = cljs.core.next(seq14092);\nvar G__14094 = cljs.core.first(seq14092__$1);\nvar seq14092__$2 = cljs.core.next(seq14092__$1);\nvar self__5711__auto__ = this;\nreturn self__5711__auto__.cljs$core$IFn$_invoke$arity$variadic(G__14093,G__14094,seq14092__$2);\n}));\n\n/**\n * An interceptor which adds registered global interceptors to the context's queue.\n * \n * NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\n */\nre_frame.std_interceptors.inject_global_interceptors = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"inject-global-interceptors\",\"inject-global-interceptors\",-2144129737),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$inject_global_interceptors_before(context){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),(function (p1__14099_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(re_frame.settings.get_global_interceptors(),p1__14099_SHARP_);\n}));\n})], 0));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","contains re-frame supplied, standard interceptors","~:file","re_frame/std_interceptors.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$shadow.js.shim.module$react","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^Q","~$data","~$clojure.data","~$re-frame.trace","^T","~$re-frame.settings","^U","~$cljs.core","^V","~$interceptor","^Q","~$goog","^X","~$trace","^T","~$re-frame.utils","^Z","~$settings","^U","~$re-frame.loggers","^10","~$utils","^Z","^P","^P","^S","^S","~$re-frame.db","^12"],"~:seen",["^G",["~:require"]],"~:uses",["^ ","~$->interceptor","^Q","~$get-effect","^Q","~$get-coeffect","^Q","~$assoc-coeffect","^Q","~$assoc-effect","^Q","~$update-coeffect","^Q","~$console","^10","~$app-db","^12"],"~:require-macros",["^ ","^T","^T","^Y","^T","^V","^V"],"~:form",["~#list",["~$ns","^I","contains re-frame supplied, standard interceptors",["^1@",["^14",["^Q","~:refer",["^16","^17","^18","^19","^1:","^1;"]],["^10","^1B",["^1<"]],["^U","~:as","^["],["^12","^1B",["^1="]],["^S","^1C","^R"],["^P","^1C","^O"],["^Z","^1C","^11"],["^T","^1C","^Y","~:include-macros",true],["^Q","^1C","^W"]]]]],"~:flags",["^ ","^14",["^G",[]]],"~:js-deps",[],"~:deps",["^X","^V","^Q","^10","^U","^12","^S","^P","^Z","^T"]],"^L","^I","~:resource-id",["~:shadow.build.classpath/resource","re_frame/std_interceptors.cljc"],"~:compiled-at",1736360107446,"^J",["^ ","^O","^P","^Q","^Q","^R","^S","^T","^T","^U","^U","^V","^V","^W","^Q","^X","^X","^Y","^T","^Z","^Z","^[","^U","^10","^10","^11","^Z","^P","^P","^S","^S","^12","^12"],"~:resource-name","re_frame/std_interceptors.cljc","~:warnings",[],"~:source","(ns re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n    [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect update-coeffect]]\n    [re-frame.loggers :refer [console]]\n    [re-frame.settings :as settings]\n    [re-frame.db :refer [app-db]]\n    [clojure.data :as data]\n    [re-frame.cofx :as cofx]\n    [re-frame.utils :as utils]\n    [re-frame.trace :as trace :include-macros true]\n    [re-frame.interceptor :as interceptor]))\n\n\n(def debug\n  (->interceptor\n    :id     :debug\n    :before (fn debug-before\n              [context]\n              (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n              context)\n    :after  (fn debug-after\n              [context]\n              (let [event   (get-coeffect context :event)\n                    orig-db (get-coeffect context :db)\n                    new-db  (get-effect   context :db ::not-found)]\n                (if (= new-db ::not-found)\n                  (console :log \"No app-db changes in:\" event)\n                  (let [[only-before only-after] (data/diff orig-db new-db)\n                        db-changed?    (or (some? only-before) (some? only-after))]\n                    (if db-changed?\n                      (do (console :group \"db clojure.data/diff for:\" event)\n                          (console :log \"only before:\" only-before)\n                          (console :log \"only after :\" only-after)\n                          (console :groupEnd))\n                      (console :log \"No app-db changes resulted from:\" event))))\n                context))))\n\n\n(def unwrap\n  (->interceptor\n    :id      :unwrap\n    :before  (fn unwrap-before\n               [context]\n               (let [[_ payload :as event] (get-coeffect context :event)]\n                 (if-not (and (= 2 (count event))\n                              (map? payload))\n                   (do\n                     (console :warn \"re-frame: \\\"unwrap\\\" interceptor requires event to be a 2-vector of [event-id payload-map]. Got \" event)\n                     context)\n                   (assoc-coeffect context :event payload))))\n    :after   (fn unwrap-after\n               [context]\n               (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n\n(def trim-v\n  (->interceptor\n    :id      :trim-v\n    :before  (fn trim-v-before\n               [context]\n               (if-not (vector? (get-coeffect context :event))\n                 (do\n                   (console :warn \"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \" (type (get-coeffect context :event)))\n                   context)\n                 (update-coeffect context :event subvec 1)))\n    :after   (fn trim-v-after\n               [context]\n               (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n    :id     :db-handler\n    :before (fn db-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :original-event)}\n                      (let [{:keys [db event]} (get-coeffect context)]\n                        (->> (handler-fn db event)\n                             (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n(->interceptor\n  :id     :fx-handler\n  :before (fn fx-handler-before\n            [context]\n            (let [new-context\n                  (trace/with-trace\n                    {:op-type   :event/handler\n                     :operation (get-coeffect context :original-event)}\n                    (let [{:keys [event] :as coeffects} (get-coeffect context)]\n                      (->> (handler-fn coeffects event)\n                           (assoc context :effects))))]\n              (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n              new-context))))\n\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n    :id     :ctx-handler\n    :before (fn ctx-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :original-event)}\n                      (handler-fn context))]\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n\n(defn path\n  [& args]\n  (let [path (flatten args)\n        db-store-key :re-frame-path/db-store]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n      :id      :path\n      :before  (fn\n                 [context]\n                 (let [original-db (get-coeffect context :db)]\n                   (-> context\n                       (update db-store-key conj original-db)\n                       (assoc-coeffect :db (get-in original-db path)))))\n      :after   (fn [context]\n                 (let [db-store     (db-store-key context)\n                       original-db  (peek db-store)\n                       new-db-store (pop db-store)\n                       context'     (-> (assoc context db-store-key new-db-store)\n                                        (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                       db           (get-effect context :db ::not-found)]\n                   (if (= db ::not-found)\n                     context'\n                     (->> (assoc-in original-db path db)\n                          (assoc-effect context' :db))))))))\n\n\n\n\n(defn enrich\n  [f]\n  (->interceptor\n    :id :enrich\n    :after (fn enrich-after\n             [context]\n             (let [event (get-coeffect context :event)\n                   db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                           (get-coeffect context :db))]\n               (->> (f db event)\n                    (assoc-effect context :db))))))\n\n\n\n(defn after\n  [f]\n  (->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db)\n                           (get-coeffect context :db))\n                   event (get-coeffect context :event)]\n               (f db event) ;; call f for side effects\n               context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n    :id    :on-changes\n    :after (fn on-change-after\n             [context]\n             (let [new-db   (get-effect context :db)\n                   old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                   new-ins      (map #(get-in new-db %) in-paths)\n                   old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                   changed-ins? (and (contains? (get-effect context) :db)\n                                     (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n               (if changed-ins?\n                 (->> (apply f new-ins)\n                      (assoc-in new-db out-path)\n                      (assoc-effect context :db))\n                 context)))))\n\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n    :id     :inject-global-interceptors\n    :before (fn inject-global-interceptors-before\n              [context]\n              (update context :queue #(into (settings/get-global-interceptors) %)))))\n","~:reader-features",["^G",["~:cljs"]],"~:used-var-namespaces",["^G",["~$re-frame.interop","^Q","^T","^U","^V","^I","^10","^S"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.std-interceptors/debug","re_frame.interceptor.__GT_interceptor","context","re_frame.loggers.console","re_frame.interceptor.get_coeffect","event","orig-db","new-db","re_frame.interceptor.get_effect","cljs.core._EQ_","vec__14044","cljs.core.nth","only-before","only-after","clojure.data/diff","db-changed?","re-frame.loggers/console","re-frame.std-interceptors/unwrap","vec__14051","_","payload","cljs.core/count","cljs.core/map?","re-frame.interceptor/assoc-coeffect","re-frame.std-interceptors/trim-v","cljs.core/vector?","cljs.core/type","re_frame.interceptor.update_coeffect","cljs.core/subvec","re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__14058","re-frame.trace/*current-trace*","*current-trace*-temp-val__14059","re-frame.trace/start-trace","end__13674__auto__","re-frame.interop/now","duration__13675__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","map__14061","cljs.core/--destructure-map","cljs.core.get","map__14064","db","re-frame.interceptor/assoc-effect","new-trace__13676__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.std-interceptors/fx-handler->interceptor","*current-trace*-orig-val__14073","*current-trace*-temp-val__14074","map__14076","map__14077","coeffects","re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__14078","*current-trace*-temp-val__14079","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","re-frame.std-interceptors/path","seq14080","self__5712__auto__","cljs.core/seq","args","path","cljs.core/flatten","db-store-key","cljs.core/empty?","original-db","cljs.core.get_in","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core/assoc-in","re-frame.std-interceptors/enrich","f","cljs.core/contains?","re-frame.std-interceptors/after","re-frame.std-interceptors/on-changes","seq14092","G__14093","cljs.core/first","cljs.core/next","G__14094","self__5711__auto__","out-path","in-paths","old-db","new-ins","p1__14084#","cljs.core.map","old-ins","p1__14085#","changed-ins?","and__5000__auto__","cljs.core/some","cljs.core/false?","cljs.core/identical?","cljs.core.apply","re-frame.std-interceptors/inject-global-interceptors","p1__14099#","cljs.core.into","re-frame.settings/get-global-interceptors"]],"~:used-vars",["^G",["~$cljs.core/--destructure-map","~$re-frame.interceptor/get-effect","~$cljs.core/vector?","~$cljs.core/=","~$re-frame.trace/traces","~$re-frame.std-interceptors/debug","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/count","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.trace/start-trace","~$re-frame.loggers/console","~$re-frame.std-interceptors/inject-global-interceptors","~$cljs.core/dissoc","~$re-frame.std-interceptors/trim-v","~$re-frame.interop/now","~$cljs.core/pop","~$cljs.core/empty?","~$cljs.core/contains?","~$re-frame.std-interceptors/db-handler->interceptor","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/identical?","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/map","~$cljs.core/get-in","~$cljs.core/swap!","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.std-interceptors/enrich","~$clojure.data/diff","~$re-frame.std-interceptors/ctx-handler->interceptor","~$cljs.core/flatten","~$re-frame.interceptor/assoc-coeffect","~$re-frame.std-interceptors/fx-handler->interceptor","~$cljs.core/subvec","~$cljs.core/nth","~$cljs.core/false?","~$re-frame.trace/*current-trace*","~$re-frame.std-interceptors/after","~$re-frame.settings/get-global-interceptors","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$cljs.core/not","~$re-frame.interceptor/assoc-effect","~$cljs.core/assoc","~$cljs.core/assoc-in","~$re-frame.std-interceptors/path","~$cljs.core/first","~$re-frame.trace/run-tracing-callbacks!","~$cljs.core/merge","~$re-frame.std-interceptors/unwrap","~$re-frame.std-interceptors/on-changes","~$cljs.core/type","~$cljs.core/some"]]],"~:cache-keys",["~#cmap",[["^1I","reagent/impl/batching.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^G",[]],"~:deps-syms",["^X","^V","~$reagent.debug","~$reagent.impl.util"]]],["^1I","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.dom.HtmlElement"]]],["^1I","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1I","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.asserts"]]],["^1I","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/events/eventtype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.events.eventTypeHelpers","~$goog.userAgent"]]],["^1I","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3D","^3E","^3H","^3C","^3F","^3G"]]],["^1I","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3H","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^3C"]]],["^1I","re_frame/loggers.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","~$clojure.set"]]],["^1I","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3H"]]],["^1I","reagent/impl/util.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","~$clojure.string","~$clojure.walk","~$goog.object","^3@"]]],["^1I","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3D","~$goog.reflect","^3C"]]],["^1I","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/events/events.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3H","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1I","re_frame/registrar.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^1Q","^10","^U"]]],["^1I","goog/events/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3D","^3C"]]],["^1I","reagent/ratom.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^3A","^3@","~$reagent.impl.batching","^3O","^3R"]]],["^1I","re_frame/interop.cljs"],["b153aa5637718f7ef415049480b003bb00fd359b","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1I","goog/disposable/disposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1I","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","shadow/js.js"],["5e42cf82db7046093236c00a76374192709aea80","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","reagent/impl/template.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^@","^3P","^3A","~$reagent.impl.component","~$reagent.impl.input","~$reagent.impl.protocols","^44","^3@","^3R"]]],["^1I","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3H"]]],"~:SHADOW-TIMESTAMP",[1733506754000,1733506754000,1715719162000],["^1I","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3H","^3V"]]],["^1I","goog/events/listener.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.events.ListenableKey"]]],["^1I","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3H","~$goog.fs.blob","^3K","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3M","^3N"]]],["^1I","goog/events/listenermap.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.array","~$goog.events.Listener","^3R"]]],["^1I","goog/events/eventid.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3M","~$goog.html.SafeUrl","^3N","^3H","^3C"]]],["^1I","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3H","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4>","~$goog.html.SafeStyle","^4B","^3L","~$goog.html.uncheckedconversions","^3M","^3C"]]],["^1I","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.dom.TagName","^3H","~$goog.dom.element"]]],["^1I","reagent/impl/component.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^3R","^@","^3A","^40","^4:","^44","^3@"]]],["^1I","clojure/walk.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V"]]],["^1I","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3M","^4>","^4G","~$goog.html.SafeStyleSheet","^4B","^4I","^3L","^3N","^3H","^3S","^4@","^3R","^3C","~$goog.dom.tags","^4?"]]],["^1I","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3R"]]],["^1I","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^4@","^3C","^3D"]]],["^1I","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","re_frame/settings.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^1Q","^10"]]],["^1I","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^4@","^3H","^4C","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4I","~$goog.dom.safe","^4F","^4H","~$goog.math.Coordinate","~$goog.math.Size","^3R","~$goog.string","^3M","~$goog.string.Unicode","^3J"]]],["^1I","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.debug.Error","^4N"]]],["^1I","reagent/impl/protocols.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V"]]],["^1I","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^4@","^3H","~$goog.collections.maps","^4R","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1I","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3E"]]],["^1I","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/events/eventtypehelpers.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3Y","^3J"]]],["^1I","re_frame/db.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^1Q"]]],["^1I","goog/disposable/idisposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",[]]],["^1I","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^4@","^3R"]]],["^1I","goog/disposable/dispose.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","clojure/string.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^4R","~$goog.string.StringBuffer"]]],["^1I","re_frame/cofx.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^12","^Q","~$re-frame.registrar","^10"]]],["~:shadow.build.js-support/require","react"],["^@","shadow.js.shim.module$react.js","require","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$shadow.js"]]],["^1I","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3H"]]],["^1I","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^4O","^4H","^3M","^3C"]]],["^1I","re_frame/interceptor.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^10","^1Q","^T","^3O"]]],["^1I","clojure/data.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^3O"]]],["^1I","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3C","^3G"]]],["^1I","reagent/core.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^@","~$reagent.impl.template","^48","^3A","^40","^4:","^44","^3@"]]],["^1I","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^4@","~$goog.debug.errorcontext"]]],["^1I","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.math"]]],["^1I","re_frame/std_interceptors.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^Q","^10","^U","^12","^S","^P","^Z","^T"]]],["^1I","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.flags"]]],["^1I","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3W","~$goog.dom","^4I","^4E","^3S","^3T"]]],["^1I","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^4N","^4I"]]],["^1I","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3H","^4F","^4>","^4G","^4K","^4B","^3L","^3M","^3C"]]],["^1I","re_frame/utils.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^10"]]],["^1I","reagent/impl/input.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^48","^40","^4:"]]],["^1I","goog/events/event.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.Disposable","~$goog.events.EventId"]]],["^1I","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","cljs/core.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.math.Long","~$goog.math.Integer","^4R","^3R","^4@","~$goog.Uri","^4Z"]]],["^1I","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3M","^3N","^4?","^3H"]]],["^1I","reagent/debug.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V"]]],["^1I","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3M","^4G","^3N","^3R","^3H","^3C"]]],["^1I","goog/events/browserevent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","~$goog.debug","~$goog.events.Event","~$goog.events.EventType","^3V","^3J"]]],["^1I","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3V"]]],["^1I","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3J"]]],["^1I","clojure/set.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V"]]],["^1I","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3H","^4R"]]],["^1I","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^3H","^3N"]]],["^1I","goog/disposable/disposeall.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^46"]]],["^1I","goog/events/listenable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","goog/events/listenablekey.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X"]]],["^1I","re_frame/trace.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^3<",["^ ","^3=",null,"^3>",["^G",[]],"^3?",["^X","^V","^1Q","^10","^4E"]]]]],"~:clj-info",["^ ","jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1690756440000,"jar:file:/Users/john/.m2/repository/re-frame/re-frame/1.2.0/re-frame-1.2.0.jar!/re_frame/interop.clj",1729977923000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes/and_or.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1715719162000,"jar:file:/Users/john/.m2/repository/re-frame/re-frame/1.2.0/re-frame-1.2.0.jar!/re_frame/trace.cljc",1729977923000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1690756440000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/core.clj",1685651089000,"jar:file:/Users/john/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1679776603000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/compiler.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/util.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/tagged_literals.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/ratom.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/env.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl/namespaces.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/debug.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64.clj",1715719162000,"jar:file:/Users/john/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/interop.clj",1685651089000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/instant.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/core.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/js_deps.cljc",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/data/json.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64_vlq.clj",1715719162000,"jar:file:/Users/john/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1690756440000,"jar:file:/Users/john/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/externs.clj",1715719162000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","contains re-frame supplied, standard interceptors","^7","re_frame/std_interceptors.cljc","^8",1,"^9",5,"^:",1,"^;",30],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",null,"^F",["^G",[]],"^H","^I","^J",["^ "],"^M",null,"^N",["^ ","^O","^P","^Q","^Q","^R","^S","^T","^T","^U","^U","^V","^V","^W","^Q","^X","^X","^Y","^T","^Z","^Z","^[","^U","^10","^10","^11","^Z","^P","^P","^S","^S","^12","^12"],"^13",["^G",["^14"]],"^15",["^ ","^16","^Q","^17","^Q","^18","^Q","^19","^Q","^1:","^Q","^1;","^Q","^1<","^10","^1=","^12"],"~:defs",["^ ","~$unwrap",["^ ","^H","^36","^7","re_frame/std_interceptors.cljc","^8",40,"^9",1,"^:",40,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",40,"^9",6,"^:",40,"^;",12],"~:tag","~$cljs.core/IMap"],"~$on-changes",["^ ","~:protocol-inline",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",223,"^9",8,"^:",223,"^;",18,"~:arglists",["^1@",["~$quote",["^1@",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^1@",["~$f","^6A","^6B"]]],"^6?",["^1@",[["~$f","^6A","~$&","^6B"]]],"~:arglists-meta",["^1@",[null]]]],"^H","^37","^7","re_frame/std_interceptors.cljc","^;",18,"^6C",["^ ","^6D",true,"^6E",2,"^6F",2,"^6G",[["^1@",["~$f","^6A","^6B"]]],"^6?",["^1@",[["~$f","^6A","~$&","^6B"]]],"^6H",["^1@",[null]]],"^6G",[["^1@",["~$f","^6A","^6B"]]],"~:protocol-impl",null,"^6E",2,"^6H",["^1@",[null]],"^9",1,"^6D",true,"~:methods",[["^ ","^6E",2,"^6D",true,"^6;","^6<"]],"^8",223,"~:ret-tag","~$any","^:",223,"^6F",2,"~:fn-var",true,"^6?",["^1@",[["~$f","^6A","~$&","^6B"]]]],"~$enrich",["^ ","^6>",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",195,"^9",7,"^:",195,"^;",13,"^6?",["^1@",["^6@",["^1@",[["~$f"]]]]]],"^H","^2L","^7","re_frame/std_interceptors.cljc","^;",13,"^6G",["^1@",[["~$f"]]],"^6I",null,"^6H",["^1@",[null,null]],"^9",1,"^6D",false,"^8",195,"^6K","^6<","^:",195,"^6F",1,"^6M",true,"^6?",["^1@",["^6@",["^1@",[["~$f"]]]]]],"~$path",["^ ","^6>",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",166,"^9",7,"^:",166,"^;",11,"^6?",["^1@",["^6@",["^1@",[["~$&","~$args"]]]]],"^6C",["^ ","^6D",true,"^6E",0,"^6F",0,"^6G",[["^1@",["^6P"]]],"^6?",["^1@",[["~$&","^6P"]]],"^6H",["^1@",[null]]]],"^H","^32","^7","re_frame/std_interceptors.cljc","^;",11,"^6C",["^ ","^6D",true,"^6E",0,"^6F",0,"^6G",[["^1@",["^6P"]]],"^6?",["^1@",[["~$&","^6P"]]],"^6H",["^1@",[null]]],"^6G",[["^1@",["^6P"]]],"^6I",null,"^6E",0,"^6H",["^1@",[null]],"^9",1,"^6D",true,"^6J",[["^ ","^6E",0,"^6D",true,"^6;","^6<"]],"^8",166,"^6K","^6L","^:",166,"^6F",0,"^6M",true,"^6?",["^1@",[["~$&","^6P"]]]],"~$ctx-handler->interceptor",["^ ","^6>",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",140,"^9",7,"^:",140,"^;",31,"^6?",["^1@",["^6@",["^1@",[["~$handler-fn"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"^H","^2N","^7","re_frame/std_interceptors.cljc","^;",31,"^6G",["^1@",[["^6R"]]],"^6I",null,"^6H",["^1@",[null,null]],"^9",1,"^6D",false,"^8",140,"^6K","^6<","^:",140,"^6F",1,"^6M",true,"^6?",["^1@",["^6@",["^1@",[["^6R"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"~$debug",["^ ","^H","^20","^7","re_frame/std_interceptors.cljc","^8",15,"^9",1,"^:",15,"^;",11,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",15,"^9",6,"^:",15,"^;",11],"^6;","^6<"],"~$trim-v",["^ ","^H","^2:","^7","re_frame/std_interceptors.cljc","^8",57,"^9",1,"^:",57,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",57,"^9",6,"^:",57,"^;",12],"^6;","^6<"],"~$after",["^ ","^6>",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",210,"^9",7,"^:",210,"^;",12,"^6?",["^1@",["^6@",["^1@",[["~$f"]]]]]],"^H","^2V","^7","re_frame/std_interceptors.cljc","^;",12,"^6G",["^1@",[["~$f"]]],"^6I",null,"^6H",["^1@",[null,null]],"^9",1,"^6D",false,"^8",210,"^6K","^6<","^:",210,"^6F",1,"^6M",true,"^6?",["^1@",["^6@",["^1@",[["~$f"]]]]]],"~$fx-handler->interceptor",["^ ","^6>",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",109,"^9",7,"^:",109,"^;",30,"^6?",["^1@",["^6@",["^1@",[["^6R"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^H","^2Q","^7","re_frame/std_interceptors.cljc","^;",30,"^6G",["^1@",[["^6R"]]],"^6I",null,"^6H",["^1@",[null,null]],"^9",1,"^6D",false,"^8",109,"^6K","^6<","^:",109,"^6F",1,"^6M",true,"^6?",["^1@",["^6@",["^1@",[["^6R"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$db-handler->interceptor",["^ ","^6>",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",77,"^9",7,"^:",77,"^;",30,"^6?",["^1@",["^6@",["^1@",[["^6R"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^H","^2?","^7","re_frame/std_interceptors.cljc","^;",30,"^6G",["^1@",[["^6R"]]],"^6I",null,"^6H",["^1@",[null,null]],"^9",1,"^6D",false,"^8",77,"^6K","^6<","^:",77,"^6F",1,"^6M",true,"^6?",["^1@",["^6@",["^1@",[["^6R"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"~$inject-global-interceptors",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",247,"^9",6,"^:",247,"^;",32],"^H","^28","^7","re_frame/std_interceptors.cljc","^;",32,"^9",1,"^8",247,"^:",247,"^6;","^6<","^6","An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector."]],"^1>",["^ ","^T","^T","^Y","^T","^V","^V"],"~:cljs.analyzer/constants",["^ ","^13",["^G",["~:path","~:tags","~:original-event","~:group","~:db","~:fx-handler","~:re-frame.std-interceptors/not-found","~:queue","~:warn","~:operation","~:start","~:duration","~:debug","~:trim-v","~:event/handler","~:db-handler","~:event","~:after","~:id","~:effects","~:inject-global-interceptors","~:error","~:coeffects","~:re-frame-path/db-store","~:end","~:unwrap","~:on-changes","~:groupEnd","~:ctx-handler","~:enrich","~:before","~:op-type","~:log"]],"~:order",["^7@","^7:","^7L","^7N","^7>","^7?","^72","^74","^71","^7I","^7G","^76","^70","^7;","^7=","^7M","^77","^7<","^78","^79","^7F","^6[","^7A","^7D","^73","^7J","^7E","^7C","^6Z","^7K","^7H","^7B","^75"]],"^1E",["^ ","^14",["^G",[]]],"^1F",[],"^1G",["^X","^V","^Q","^10","^U","^12","^S","^P","^Z","^T"]],"^L","^I","~:ns-specs",["^ "],"~:ns-spec-vars",["^G",[]],"~:compiler-options",["^3;",[["^7R","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^7R","~:shadow-tweaks"],null,["^7R","~:source-map-inline"],null,["^7R","~:shadow-optimize-constants"],null,["^7R","~:elide-asserts"],false,["^7R","~:optimize-constants"],null,["^7R","^1L"],null,["^7R","~:external-config"],null,["^7R","~:tooling-config"],null,["^7R","~:emit-constants"],null,["^7R","~:load-tests"],null,["^7R","~:form-size-threshold"],null,["^7R","~:global-goog-object&array"],null,["^7R","~:data-readers"],null,["^7R","~:infer-externs"],"~:auto",["^7R","^1N"],null,["^7T","~:js-provider"],"^14",["~:mode"],"~:dev",["^7R","~:fn-invoke-direct"],null,["^7R","~:source-map"],"/dev/null"]]]